#
# Uncrustify Configuration File
# File Created With UncrustifyX 0.4.3 (252)
#

# Alignment
# ---------

## Alignment Span

# Alignment span for assignment
align_assign_span                       = 2             # number

# Alignment span for equals in enums
align_enum_equ_span                     = 2             # number

# Alignment span for struct initializer values
align_struct_init_span                  = 2             # number

# Alignment span for struct/union
align_var_struct_span                   = 2             # number

# Alignment span for trailing comments
align_right_cmt_span                    = 2             # number

# Alignment span for variable definitions
align_var_def_span                      = 2             # number

## Alignment Style

# Alignment style for ampersand in variable definitions
align_var_def_amp_style                 = 0             # number

# Alignment style for star in variable definitions
align_var_def_star_style                = 0             # number

## Gap

# Minimum gap for trailing comment
align_right_cmt_gap                     = 1             # number

## Other

# Align colon in struct bit fields
align_var_def_colon                     = true          # boolean (false/true)

# Blank Lines
# -----------

## Newline Count After

# Newline count after closing class definition
nl_after_class                          = 2             # number

# Newline count after closing struct/enum/union definition
nl_after_struct                         = 2             # number

# Newline count after function body
nl_after_func_body                      = 2             # number

# Newline count after try-catch-finally
nl_after_try_catch_finally              = 2             # number

## Other

# Maximum consecutive newlines
nl_max                                  = 2             # number

# Remove blank lines before close brace
eat_blanks_before_close_brace           = true          # boolean (false/true)

# Code-Modifying
# --------------

## Braces

# Braces around fully braced case statement
mod_case_brace                          = force         # string (add/force/ignore/remove)

# Braces on chained if/elseif/else statements
mod_full_brace_if_chain                 = true          # boolean (false/true)

# Braces on single-line do statement
mod_full_brace_do                       = force         # string (add/force/ignore/remove)

# Braces on single-line else statement
mod_full_brace_if                       = force         # string (add/force/ignore/remove)

# Braces on single-line for statement
mod_full_brace_for                      = force         # string (add/force/ignore/remove)

# Braces on single-line while statement
mod_full_brace_while                    = force         # string (add/force/ignore/remove)

## Comments

# Add comment after function of size
mod_add_long_function_closebrace_comment = 10           # number

# Add comment after ifdef/endif statement of size
mod_add_long_ifdef_endif_comment        = 1             # number

# Add comment after switch statement of size
mod_add_long_switch_closebrace_comment  = 5             # number

## Other

# Remove empty return as last statement in function
mod_remove_empty_return                 = true          # boolean (false/true)

## Semicolons

# Remove superflous semicolons
mod_remove_extra_semicolon              = true          # boolean (false/true)

# Comments
# --------

## Empty Lines

# Empty first line for multi-line C comments
cmt_c_nl_start                          = true          # boolean (false/true)

# Empty first line for multi-line C++ comments
cmt_cpp_nl_start                        = true          # boolean (false/true)

# Empty last line for multi-line C comments
cmt_c_nl_end                            = true          # boolean (false/true)

# Empty last line for multi-line C++ comments
cmt_cpp_nl_end                          = true          # boolean (false/true)

## Other

# Stars on multi-line comments
cmt_star_cont                           = true          # boolean (false/true)

# General
# -------

## Other

# Newline character
newlines                                = lf            # string (auto/cr/crlf/lf)

# Indentation
# -----------

## Indentation Size

# Indentation column size
indent_columns                          = 4             # number

## Limits

# Namespace indentation limit
indent_namespace_limit                  = 0             # number

## Other

# Indent namespace body
indent_namespace                        = false         # boolean (false/true)

# Indent with tabs
indent_with_tabs                        = 0             # number

# Indentation for constructor initializer list
indent_ctor_init                        = 2             # number

# Line-Splitting
# --------------

## Splitting

# Code width
code_width                              = 120           # number

# Split long for statements at semicolons
ls_for_split_full                       = true          # boolean (false/true)

# Split long function prototypes/calls at commas
ls_func_split_full                      = true          # boolean (false/true)

# Newlines
# --------

## Newline After

# Newline after semicolon
nl_after_semicolon                      = true          # boolean (false/true)

# Newline after template
nl_template_class                       = force         # string (add/force/ignore/remove)

## Newline Between

# Newline between assignment and open brace
nl_assign_brace                         = remove        # string (add/force/ignore/remove)

# Newline between case colon and open brace
nl_case_colon_brace                     = remove        # string (add/force/ignore/remove)

# Newline between catch and open brace
nl_catch_brace                          = remove        # string (add/force/ignore/remove)

# Newline between class and open brace
nl_class_brace                          = remove        # string (add/force/ignore/remove)

# Newline between close brace and catch
nl_brace_catch                          = remove        # string (add/force/ignore/remove)

# Newline between close brace and else
nl_brace_else                           = remove        # string (add/force/ignore/remove)

# Newline between close brace and finally
nl_brace_finally                        = remove        # string (add/force/ignore/remove)

# Newline between namespace and open brace
nl_namespace_brace                      = remove        # string (add/force/ignore/remove)

## Other

# Newlines at end of file
nl_end_of_file                          = add           # string (add/force/ignore/remove)

# Other
# -----

## Other

# Force encoding UTF-8
utf8_force                              = true          # boolean (false/true)

# UTF-8 byte order mark
utf8_bom                                = remove        # string (add/force/ignore/remove)

# Positioning
# -----------

## Constructor

# Position of colon after constructor
pos_class_colon                         = lead          # string (ignore/lead/trail)

# Position of comma in constructor
pos_class_comma                         = lead          # string (ignore/lead/trail)

# Spacing
# -------

## Other

# Space count before trailing or embedded comment
sp_num_before_tr_emb_cmt                = 1             # number

## Space After

# Space after C++ comment opening
sp_cmt_cpp_start                        = add           # string (add/force/ignore/remove)

# Space after address-of operator
sp_addr                                 = remove        # string (add/force/ignore/remove)

# Space after angle bracket
sp_after_angle                          = remove        # string (add/force/ignore/remove)

# Space after capture specification
sp_cpp_lambda_paren                     = remove        # string (add/force/ignore/remove)

# Space after dereference operator
sp_deref                                = remove        # string (add/force/ignore/remove)

# Space after double-colon operator
sp_after_dc                             = remove        # string (add/force/ignore/remove)

# Space after invert operator
sp_inv                                  = remove        # string (add/force/ignore/remove)

# Space after not operator
sp_not                                  = remove        # string (add/force/ignore/remove)

# Space after operator
sp_after_operator                       = remove        # string (add/force/ignore/remove)

# Space after operator and open parenthesis
sp_after_operator_sym                   = add           # string (add/force/ignore/remove)

## Space Around

# Space around arithmetic operators
sp_arith                                = force         # string (add/force/ignore/remove)

# Space around assignment equals in enum
sp_enum_assign                          = force         # string (add/force/ignore/remove)

# Space around assignment in lambda capture specification
sp_cpp_lambda_assign                    = force         # string (add/force/ignore/remove)

# Space around assignment operator
sp_assign                               = force         # string (add/force/ignore/remove)

# Space around assignment operator in prototype
sp_assign_default                       = force         # string (add/force/ignore/remove)

# Space around boolean operators
sp_bool                                 = force         # string (add/force/ignore/remove)

# Space around compare operators
sp_compare                              = force         # string (add/force/ignore/remove)

# Space around increment/decrement operators
sp_incdec                               = remove        # string (add/force/ignore/remove)

# Space around member operators
sp_member                               = remove        # string (add/force/ignore/remove)

# Space around ternary condition colon
sp_cond_colon                           = force         # string (add/force/ignore/remove)

# Space around ternary condition question mark
sp_cond_question                        = force         # string (add/force/ignore/remove)

## Space Between

# Space between double angle brackets
sp_permit_cpp11_shift                   = true          # boolean (false/true)